
/*

  std::cout << "Camera->FindGlyph->Started" << std::endl;
  cv::Mat IN;
    cv::UMat gpuIN;

  cv::UMat gpuBW;
  cv::UMat gpuHSV;
  cv::UMat gpuBlur;
  cv::UMat gpuEdge;


  cv::UMat gpuRoi;
  cv::UMat gpuRoiOtsu;
     // cv::UMat gpuRANGE;
  //cv::cvtColor(grab_picture_, gpuHSV, cv::COLOR_BGR2HSV);
//cv::inRange(gpuHSV, cv::Scalar(0,0,0),cv::Scalar(0,255,255), gpuRANGE);
//imshow("eeh",gpuRANGE);
//std::cout << gpuRANGE.type() << "DEPTH" << std::endl;
//cv::bitwise_and(grab_picture_,grab_cv_debug_picture_, gpuRANGE);

    //IN = cv::imread("glyph_m1.png", cv::IMREAD_COLOR);
    //IN.copyTo(gpuIN);
  cv::cvtColor(grab_picture_, gpuBW, cv::COLOR_BGR2GRAY);
  cv::GaussianBlur(gpuBW, gpuBlur, cv::Size(3,3), 0, 0);
  cv::Canny(gpuBlur, gpuEdge, 0, 100, 3, false);

  vector<vector<cv::Point> > contours;
  vector<vector<cv::Point> > contours_poly;
  vector<cv::Vec4i> hierarchy;

  

  cv::Mat drawing = cv::Mat::zeros(gpuEdge.size(), CV_8UC3);

  cv::findContours(gpuEdge, contours, hierarchy, cv::RETR_TREE, cv::CHAIN_APPROX_SIMPLE);

  contours_poly.resize(contours.size());
  vector<cv::Moments> mu(contours.size());
  

        std::vector<cv::Point2f> inputQuad;
        std::vector<cv::Point2f> outputQuad;
cv::Mat transmtx;
cv::Mat transformed;

  for (size_t i = 0; i < contours.size(); i++){
    cv::approxPolyDP(contours[i], contours_poly[i], 0.02*cv::arcLength(contours[i], true), true);

    mu[i] = cv::moments(contours[i], false);

    if (contours_poly[i].size() == 4){
      double area = cv::contourArea(contours_poly[i]);
      if (area >= 1000.0){
        cv::Scalar color = cv::Scalar(rng.uniform(0,255),rng.uniform(0,255),rng.uniform(0,255));
        cv::drawContours(drawing, contours_poly, i, color, 2, 8, hierarchy, 0, cv::Point());
        int cx = int(mu[i].m10/mu[i].m00);
        int cy = int(mu[i].m01/mu[i].m00);
        std::cout << i <<" is square potential glyph " << "moments m00=" << mu[i].m00 << " m01=" << mu[i].m01  << " m10=" << mu[i].m10  << " m11=" << mu[i].m11 << std::endl;
        std::cout << "cx=" << cx << "cy=" << cy << std::endl;

        //vector<vector<cv::Point> > rect;
        //cv::Mat rect = cv::Mat::zeros(cv::Size(4,2), CV_32F);

        inputQuad.clear();
        outputQuad.clear();

        std::cout << "1 coords" << contours_poly[0][0].x << " "<< contours_poly[0][0].y << std::endl;
        std::cout << "2 coords" << contours_poly[0][1].x << " " << contours_poly[0][1].y << std::endl;
        std::cout << "3 coords" << contours_poly[0][3].x << " " << contours_poly[0][3].y << std::endl;
        std::cout << "4 coords" << contours_poly[0][2].x << " " << contours_poly[0][2].y << std::endl;

        inputQuad.push_back(cv::Point2f(contours_poly[0][0].x, contours_poly[0][0].y));
        inputQuad.push_back(cv::Point2f(contours_poly[0][1].x, contours_poly[0][1].y));
        inputQuad.push_back(cv::Point2f(contours_poly[0][3].x, contours_poly[0][3].y));
        inputQuad.push_back(cv::Point2f(contours_poly[0][2].x, contours_poly[0][2].y));
        outputQuad.push_back(cv::Point2f(0,0));
        outputQuad.push_back(cv::Point2f(0,250));
        outputQuad.push_back(cv::Point2f(250,0));
        outputQuad.push_back(cv::Point2f(250,250));

        transmtx = cv::getPerspectiveTransform(inputQuad, outputQuad);
        transformed = cv::Mat::zeros(250,250, CV_8UC3);

        cv::warpPerspective(grab_picture_, transformed,transmtx,transformed.size());
        cv::imshow("perpsective",transformed);
        cv::waitKey(1000);
        cv::destroyWindow("perpsective");
        //cv::Point2f outputQuad[4];
        //cv::Mat lambda(2,4,CV_32FC1);
        //cv::Mat input, output;
        //input = 

      }
    }
  }



  cv::imshow("eeha", gpuEdge);
  cv::imshow("eeaa", drawing);

/*
for( size_t i = 0; i < contours.size(); i++ )
            {
                // approximate contour with accuracy proportional
                // to the contour perimeter
                approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), true)*0.02, true);

                // square contours should have 4 vertices after approximation
                // relatively large area (to filter out noisy contours)
                // and be convex.
                // Note: absolute value of an area is used because
                // area may be positive or negative - in accordance with the
                // contour orientation
                if( approx.size() == 4 &&
                    fabs(contourArea(Mat(approx))) > 1000 &&
                    isContourConvex(Mat(approx)) )
                {
                    double maxCosine = 0;

                    for( int j = 2; j < 5; j++ )
                    {
                        // find the maximum cosine of the angle between joint edges
                        double cosine = fabs(angle(approx[j%4], approx[j-2], approx[j-1]));
                        maxCosine = MAX(maxCosine, cosine);
                    }

                    // if cosines of all angles are small
                    // (all angles are ~90 degree) then write quandrange
                    // vertices to resultant sequence
                    if( maxCosine < 0.3 )
                        squares.push_back(approx);
                }
            }
*/